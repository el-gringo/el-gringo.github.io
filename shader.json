{
  "id": 2221,
  "name": "New Basic Shader",
  "fragment": "precision highp float;\nvarying vec2 vUv;\nuniform float time;\nuniform vec2 resolution;\n\n#ifdef GL_ES\nprecision lowp float;\n#endif\n\nconst float count = 7.0;\n\nfloat Hash( vec2 p,  float s)\n{\n    vec3 p2 = vec3(p.xy,10.0 * abs(sin(s)));\n    return fract(sin(dot(p2,vec3(27.1,61.7, 12.4)))*273758.5453123);\n}\n\nfloat noise(vec2 p, float s)\n{\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n    f *= f * (3.0-2.0*f);\n\n    return mix(mix(Hash(i + vec2(0.,0.), s), Hash(i + vec2(1.,0.), s),f.x),\n               mix(Hash(i + vec2(0.,1.), s), Hash(i + vec2(1.,1.), s),f.x),\n               f.y) * s;\n}\n\nfloat fbm(vec2 p)\n{\n     float v = 0.0;\n     v += noise(p*3.5, 0.35);\n     v += noise(p*2., 0.25);\n     v += noise(p*4., 0.125);\n     v += noise(p*8., 0.0625);\n     return v;\n}\n\nvoid main( void ) \n{\n\n\tvec2 uv = ( gl_FragCoord.xy / resolution.xy ) * 2.0 - 1.0;\n\tuv.x *= resolution.x/resolution.y;\n\n\tfloat timeMult = 1.0;\n\tvec3 finalColor = vec3( 0.0 );\n\tfor( float i=1.; i < count; ++i )\n\t{\n\t\t//float t = abs(1.0 / ((uv.x + fbm( uv + time/i)) * (i*50.0)));\n\t\tfloat t = abs(1.0 / ((uv.x + fbm( uv + time/i)) * (i*50.0)));\n\t\tfinalColor +=  t * vec3( i * 0.0, 2.0, 0.0 );\n\t}\n\t\n\tfor( float j=1.; j < 1.0; ++j )\n\t{\n\t\tfloat t = abs(1.0 / ((uv.x + fbm( uv + j + (time*timeMult)/j)) * (j*50.0)));\n\t\tfinalColor +=  t * vec3( j * 0.0 , 2.0, 0.0 );\n\t}\n\t\n\tfor( float j=1.; j < 1.0; ++j )\n\t{\n\t\tfloat t = abs(1.0 / ((uv.x + fbm( uv + j + 1.0 + (time*timeMult)/j)) * (j*50.0)));\n\t\tfinalColor +=  t * vec3( j * 0.0 , 2.0, 0.0 );\n\t}\n\t\n\tfor( float j=1.; j < 1.0; ++j )\n\t{\n\t\tfloat t = abs(1.0 / ((uv.x + fbm( uv + j + 1.0 + (time*timeMult)/j)) * (j*50.0)));\n\t\tfinalColor +=  t * vec3( j * 0.0 , 2.0, 0.0 );\n\t}\n\t\n\tfor( float j=1.; j < 1.0; ++j )\n\t{\n\t\tfloat t = abs(1.0 / ((uv.x + fbm( uv + j + 117.0 + (time*timeMult)/j)) * (j*50.0)));\n\t\tfinalColor +=  t * vec3( j * 0.0 , 2.0, 0.0 );\n\t}\n\t\n\tgl_FragColor = vec4( finalColor, 1.0 );\n\n}\n",
  "vertex": "/**\n* Example Vertex Shader\n* Sets the position of the vertex by setting gl_Position\n*/\n\n// Set the precision for data types used in this shader\nprecision highp float;\nprecision highp int;\n\n// Default THREE.js uniforms available to both fragment and vertex shader\nuniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\n\n// Default uniforms provided by ShaderFrog.\nuniform vec3 cameraPosition;\nuniform float time;\n\n// Default attributes provided by THREE.js. Attributes are only available in the\n// vertex shader. You can pass them to the fragment shader using varyings\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\nattribute vec2 uv2;\n\n// Examples of variables passed from vertex to fragment shader\nvarying vec3 vPosition;\nvarying vec3 vNormal;\nvarying vec2 vUv;\nvarying vec2 vUv2;\n\nvoid main() {\n\n    // To pass variables to the fragment shader, you assign them here in the\n    // main function. Traditionally you name the varying with vAttributeName\n    vNormal = normal;\n    vUv = uv;\n    vUv2 = uv2;\n    vPosition = position;\n\n    // This sets the position of the vertex in 3d space. The correct math is\n    // provided below to take into account camera and object data.\n    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n}",
  "uniforms": {
    "cameraPosition": {
      "name": "cameraPosition",
      "displayName": null,
      "type": "v3",
      "glslType": "vec3",
      "useGridHelper": false,
      "useRange": false,
      "range": null,
      "isRandom": false,
      "randomRange": null,
      "useToggle": false,
      "toggle": null,
      "description": ""
    },
    "time": {
      "name": "time",
      "displayName": null,
      "type": "f",
      "glslType": "float",
      "useGridHelper": false,
      "useRange": false,
      "range": null,
      "isRandom": false,
      "randomRange": null,
      "useToggle": false,
      "toggle": null,
      "description": ""
    },
    "resolution": {
      "name": "resolution",
      "displayName": null,
      "type": "v2",
      "glslType": "vec2",
      "useGridHelper": false,
      "useRange": false,
      "range": null,
      "isRandom": false,
      "randomRange": null,
      "useToggle": false,
      "toggle": null,
      "description": ""
    }
  },
  "url": "http://shaderfrog.com/app/view/2221",
  "user": {
    "username": "El Gringo",
    "url": "http://shaderfrog.com/app/profile/andrewray"
  }
}